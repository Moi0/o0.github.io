{"v":0.1,"active_step":8,"name":"","preview_type":0,"steps":[{"active_editor":1,"undefined":0,"description":"<p></p>","editors":{"html":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n  </head>\n  <body>\n\n  </body>\n</html>\n","js":"'use strict';\n\nclass GameCharacter {\n  \n}"},"scale":"100%","selections":{"html":[{"start":{"row":10,"column":0},"end":{"row":10,"column":0}}],"js":[{"start":{"row":3,"column":2},"end":{"row":3,"column":2}}]},"zoom":1},{"active_editor":1,"undefined":0,"description":"<p></p>","editors":{"html":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n  </head>\n  <body>\n\n  </body>\n</html>\n","js":"'use strict';\n\nclass GameCharacter {\n  static get Direction() {\n    return {\n      NULL: 0x00,\n      TOP: 0x01,\n      RIGHT: 0x02,\n      BOTTOM: 0x04,\n      LEFT: 0x08\n    };\n  }\n}"},"scale":"100%","selections":{"html":[{"start":{"row":10,"column":0},"end":{"row":10,"column":0}}],"js":[{"start":{"row":11,"column":3},"end":{"row":11,"column":3}}]},"zoom":1},{"active_editor":1,"undefined":0,"description":"<p></p>","editors":{"html":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n  </head>\n  <body>\n\n  </body>\n</html>\n","js":"'use strict';\n\nclass GameCharacter {\n  static get Direction() {\n    return {\n      NULL: 0x00,\n      TOP: 0x01,\n      RIGHT: 0x02,\n      BOTTOM: 0x04,\n      LEFT: 0x08\n    };\n  }\n\n  constructor() {\n    this.character = {\n      x: 0,\n      y: 0,\n      direction: GameCharacter.Direction.NULL,\n      verticalSpeed: 1,\n      horizontalSpeed: 1\n    };\n  }\n}"},"scale":"100%","selections":{"html":[{"start":{"row":10,"column":0},"end":{"row":10,"column":0}}],"js":[{"start":{"row":21,"column":3},"end":{"row":21,"column":3}}]},"zoom":1},{"active_editor":1,"undefined":0,"description":"<p></p>","editors":{"html":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n  </head>\n  <body>\n\n  </body>\n</html>\n","js":"'use strict';\n\nclass GameCharacter {\n  static get Direction() {\n    return {\n      NULL: 0x00,\n      TOP: 0x01,\n      RIGHT: 0x02,\n      BOTTOM: 0x04,\n      LEFT: 0x08\n    };\n  }\n\n  constructor() {\n    this.character = {\n      x: 0,\n      y: 0,\n      direction: GameCharacter.Direction.NULL,\n      verticalSpeed: 1,\n      horizontalSpeed: 1\n    };\n  }\n\n  setDirection(direction) {\n    this.character.direction = this.character.direction | direction;\n\n    switch (direction) {\n      case GameCharacter.Direction.TOP:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.BOTTOM;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n\n      case GameCharacter.Direction.BOTTOM:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.TOP;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n    }\n  }\n}"},"scale":"100%","selections":{"html":[{"start":{"row":10,"column":0},"end":{"row":10,"column":0}}],"js":[{"start":{"row":42,"column":5},"end":{"row":42,"column":5}}]},"zoom":1},{"active_editor":1,"undefined":0,"description":"<p></p>","editors":{"html":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n  </head>\n  <body>\n\n  </body>\n</html>\n","js":"'use strict';\n\nclass GameCharacter {\n  static get Direction() {\n    return {\n      NULL: 0x00,\n      TOP: 0x01,\n      RIGHT: 0x02,\n      BOTTOM: 0x04,\n      LEFT: 0x08\n    };\n  }\n\n  static get DirectionBehaviour() {\n    return new Map([]);\n  }\n\n  constructor() {\n    this.character = {\n      x: 0,\n      y: 0,\n      direction: GameCharacter.Direction.NULL,\n      verticalSpeed: 1,\n      horizontalSpeed: 1\n    };\n  }\n\n  setDirection(direction) {\n    this.character.direction = this.character.direction | direction;\n\n    switch (direction) {\n      case GameCharacter.Direction.TOP:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.BOTTOM;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n\n      case GameCharacter.Direction.BOTTOM:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.TOP;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n    }\n  }\n}"},"scale":"100%","selections":{"html":[{"start":{"row":10,"column":0},"end":{"row":10,"column":0}}],"js":[{"start":{"row":14,"column":23},"end":{"row":14,"column":23}}]},"zoom":1},{"active_editor":1,"undefined":0,"description":"<p></p>","editors":{"html":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n  </head>\n  <body>\n\n  </body>\n</html>\n","js":"'use strict';\n\nclass GameCharacter {\n  static get Direction() {\n    return {\n      NULL: 0x00,\n      TOP: 0x01,\n      RIGHT: 0x02,\n      BOTTOM: 0x04,\n      LEFT: 0x08\n    };\n  }\n\n  static get DirectionBehaviour() {\n    return new Map([\n      [GameCharacter.Direction.TOP, (character) => {\n        return Object.assign({}, character, {\n          y: character.y + character.verticalSpeed\n        });\n      }]\n    ]);\n  }\n\n  constructor() {\n    this.character = {\n      x: 0,\n      y: 0,\n      direction: GameCharacter.Direction.NULL,\n      verticalSpeed: 1,\n      horizontalSpeed: 1\n    };\n  }\n\n  setDirection(direction) {\n    this.character.direction = this.character.direction | direction;\n\n    switch (direction) {\n      case GameCharacter.Direction.TOP:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.BOTTOM;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n\n      case GameCharacter.Direction.BOTTOM:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.TOP;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n    }\n  }\n}"},"scale":"100%","selections":{"html":[{"start":{"row":10,"column":0},"end":{"row":10,"column":0}}],"js":[{"start":{"row":19,"column":8},"end":{"row":19,"column":8}}]},"zoom":1},{"active_editor":1,"undefined":0,"description":"<p></p>","editors":{"html":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n  </head>\n  <body>\n\n  </body>\n</html>\n","js":"'use strict';\n\nclass GameCharacter {\n  static get Direction() {\n    return {\n      NULL: 0x00,\n      TOP: 0x01,\n      RIGHT: 0x02,\n      BOTTOM: 0x04,\n      LEFT: 0x08\n    };\n  }\n\n  static get DirectionBehaviour() {\n    return new Map([\n      [GameCharacter.Direction.TOP, (character) => {\n        return Object.assign({}, character, {\n          y: character.y + character.verticalSpeed\n        });\n      }],\n\n      [GameCharacter.Direction.RIGHT, (character) => {\n        return Object.assign({}, character, {\n          x: character.x + character.horizontalSpeed\n        });\n      }]\n    ]);\n  }\n\n  constructor() {\n    this.character = {\n      x: 0,\n      y: 0,\n      direction: GameCharacter.Direction.NULL,\n      verticalSpeed: 1,\n      horizontalSpeed: 1\n    };\n  }\n\n  setDirection(direction) {\n    this.character.direction = this.character.direction | direction;\n\n    switch (direction) {\n      case GameCharacter.Direction.TOP:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.BOTTOM;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n\n      case GameCharacter.Direction.BOTTOM:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.TOP;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n    }\n  }\n}"},"scale":"100%","selections":{"html":[{"start":{"row":10,"column":0},"end":{"row":10,"column":0}}],"js":[{"start":{"row":25,"column":8},"end":{"row":25,"column":8}}]},"zoom":1},{"active_editor":1,"undefined":0,"description":"<p></p>","editors":{"html":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n  </head>\n  <body>\n\n  </body>\n</html>\n","js":"'use strict';\n\nclass GameCharacter {\n  static get Direction() {\n    return {\n      NULL: 0x00,\n      TOP: 0x01,\n      RIGHT: 0x02,\n      BOTTOM: 0x04,\n      LEFT: 0x08\n    };\n  }\n\n  static get DirectionBehaviour() {\n    return new Map([\n      [GameCharacter.Direction.TOP, (character) => {\n        return Object.assign({}, character, {\n          y: character.y + character.verticalSpeed\n        });\n      }],\n\n      [GameCharacter.Direction.RIGHT, (character) => {\n        return Object.assign({}, character, {\n          x: character.x + character.horizontalSpeed\n        });\n      }],\n\n      [GameCharacter.Direction.BOTTOM, (character) => {\n        return Object.assign({}, character, {\n          y: character.y - character.verticalSpeed\n        });\n      }],\n\n      [GameCharacter.Direction.LEFT, (character) => {\n        return Object.assign({}, character, {\n          x: character.x - character.horizontalSpeed\n        });\n      }]\n    ]);\n  }\n\n  constructor() {\n    this.character = {\n      x: 0,\n      y: 0,\n      direction: GameCharacter.Direction.NULL,\n      verticalSpeed: 1,\n      horizontalSpeed: 1\n    };\n  }\n\n  setDirection(direction) {\n    this.character.direction = this.character.direction | direction;\n\n    switch (direction) {\n      case GameCharacter.Direction.TOP:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.BOTTOM;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n\n      case GameCharacter.Direction.BOTTOM:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.TOP;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n    }\n  }\n}"},"scale":"100%","selections":{"html":[{"start":{"row":10,"column":0},"end":{"row":10,"column":0}}],"js":[{"start":{"row":21,"column":18},"end":{"row":21,"column":18}}]},"zoom":1},{"active_editor":1,"undefined":0,"description":"<p></p>","editors":{"html":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n  </head>\n  <body>\n\n  </body>\n</html>\n","js":"'use strict';\n\nclass GameCharacter {\n  static get Direction() {\n    return {\n      NULL: 0x00,\n      TOP: 0x01,\n      RIGHT: 0x02,\n      BOTTOM: 0x04,\n      LEFT: 0x08\n    };\n  }\n\n  static get DirectionBehaviour() {\n    return new Map([\n      [GameCharacter.Direction.TOP, (character) => {\n        return Object.assign({}, character, {\n          y: character.y + character.verticalSpeed\n        });\n      }],\n\n      [GameCharacter.Direction.RIGHT, (character) => {\n        return Object.assign({}, character, {\n          x: character.x + character.horizontalSpeed\n        });\n      }],\n\n      [GameCharacter.Direction.BOTTOM, (character) => {\n        return Object.assign({}, character, {\n          y: character.y - character.verticalSpeed\n        });\n      }],\n\n      [GameCharacter.Direction.LEFT, (character) => {\n        return Object.assign({}, character, {\n          x: character.x - character.horizontalSpeed\n        });\n      }]\n    ]);\n  }\n\n  constructor() {\n    this.character = {\n      x: 0,\n      y: 0,\n      direction: GameCharacter.Direction.NULL,\n      verticalSpeed: 1,\n      horizontalSpeed: 1\n    };\n  }\n\n  update() {\n    GameCharacter.DirectionBehaviour.forEach((action, direction) => {\n      if (!!(direction & this.character.direction)) {\n        this.character = action(this.character);\n      }\n    });\n  }\n\n  setDirection(direction) {\n    this.character.direction = this.character.direction | direction;\n\n    switch (direction) {\n      case GameCharacter.Direction.TOP:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.BOTTOM;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n\n      case GameCharacter.Direction.BOTTOM:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.TOP;\n        break;\n\n      case GameCharacter.Direction.RIGHT:\n        this.character.direction = this.character.direction & ~GameCharacter.Direction.LEFT;\n        break;\n    }\n  }\n}"},"scale":"100%","selections":{"html":[{"start":{"row":10,"column":0},"end":{"row":10,"column":0}}],"js":[{"start":{"row":56,"column":7},"end":{"row":56,"column":7}}]},"zoom":1}]}
